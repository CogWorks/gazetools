// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// classify
Rcpp::IntegerVector classify(std::vector<double> v, std::vector<bool> e, int samplerate, double vt = 100, double sigma = 4.5, double minsac = .02, double glswin = .04, double alpha = .7);
RcppExport SEXP gazetools_classify(SEXP vSEXP, SEXP eSEXP, SEXP samplerateSEXP, SEXP vtSEXP, SEXP sigmaSEXP, SEXP minsacSEXP, SEXP glswinSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP );
        Rcpp::traits::input_parameter< std::vector<bool> >::type e(eSEXP );
        Rcpp::traits::input_parameter< int >::type samplerate(samplerateSEXP );
        Rcpp::traits::input_parameter< double >::type vt(vtSEXP );
        Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< double >::type minsac(minsacSEXP );
        Rcpp::traits::input_parameter< double >::type glswin(glswinSEXP );
        Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP );
        Rcpp::IntegerVector __result = classify(v, e, samplerate, vt, sigma, minsac, glswin, alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// distance_2_point
std::vector<double> distance_2_point(std::vector<double> x, std::vector<double> y, double rx, double ry, double sw, double sh, Rcpp::NumericVector ez, Rcpp::NumericVector ex = Rcpp::NumericVector::create(0.0), Rcpp::NumericVector ey = Rcpp::NumericVector::create(0.0));
RcppExport SEXP gazetools_distance_2_point(SEXP xSEXP, SEXP ySEXP, SEXP rxSEXP, SEXP rySEXP, SEXP swSEXP, SEXP shSEXP, SEXP ezSEXP, SEXP exSEXP, SEXP eySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type rx(rxSEXP );
        Rcpp::traits::input_parameter< double >::type ry(rySEXP );
        Rcpp::traits::input_parameter< double >::type sw(swSEXP );
        Rcpp::traits::input_parameter< double >::type sh(shSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ez(ezSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ex(exSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ey(eySEXP );
        std::vector<double> __result = distance_2_point(x, y, rx, ry, sw, sh, ez, ex, ey);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ruidvec
std::vector<int> ruidvec(std::vector<std::string> x);
RcppExport SEXP gazetools_ruidvec(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP );
        std::vector<int> __result = ruidvec(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sigthresh
double sigthresh(std::vector<double> x, std::vector<bool> e, double threshold, double sigma);
RcppExport SEXP gazetools_sigthresh(SEXP xSEXP, SEXP eSEXP, SEXP thresholdSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP );
        Rcpp::traits::input_parameter< std::vector<bool> >::type e(eSEXP );
        Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP );
        Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP );
        double __result = sigthresh(x, e, threshold, sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// subtended_angle
std::vector<double> subtended_angle(std::vector<double> x1, std::vector<double> y1, std::vector<double> x2, std::vector<double> y2, double rx, double ry, double sw, double sh, Rcpp::NumericVector ez, Rcpp::NumericVector ex = Rcpp::NumericVector::create(0.0), Rcpp::NumericVector ey = Rcpp::NumericVector::create(0.0));
RcppExport SEXP gazetools_subtended_angle(SEXP x1SEXP, SEXP y1SEXP, SEXP x2SEXP, SEXP y2SEXP, SEXP rxSEXP, SEXP rySEXP, SEXP swSEXP, SEXP shSEXP, SEXP ezSEXP, SEXP exSEXP, SEXP eySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type x1(x1SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type y1(y1SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type x2(x2SEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type y2(y2SEXP );
        Rcpp::traits::input_parameter< double >::type rx(rxSEXP );
        Rcpp::traits::input_parameter< double >::type ry(rySEXP );
        Rcpp::traits::input_parameter< double >::type sw(swSEXP );
        Rcpp::traits::input_parameter< double >::type sh(shSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ez(ezSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ex(exSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ey(eySEXP );
        std::vector<double> __result = subtended_angle(x1, y1, x2, y2, rx, ry, sw, sh, ez, ex, ey);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// uidvec
std::vector<int> uidvec(std::vector<bool> x);
RcppExport SEXP gazetools_uidvec(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<bool> >::type x(xSEXP );
        std::vector<int> __result = uidvec(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
